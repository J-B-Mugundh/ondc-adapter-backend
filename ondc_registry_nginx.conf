worker_processes 1;

events {
    worker_connections 1024;
}

http {
    lua_package_path "C:/openresty/lualib/?.lua;;";

    server {
        listen 80;
        server_name localhost;

        location /buyer/search {
            content_by_lua_block {
                -- Load Lua JSON library
                local cjson = require "cjson"

                -- Capture the query parameter (e.g., ?item=shoes)
                local args = ngx.req.get_uri_args()
                local search_term = args.item or "default_item"

                -- Create an ONDC-compliant JSON request
                local ondc_request = {
                    context = {
                        domain = "ONDC:RET11",
                        action = "search",
                        country = "IND",
                        city = "std:080",
                        core_version = "1.1.0",
                        transaction_id = "txn-" .. ngx.time(),
                        message_id = "msg-" .. ngx.time(),
                        timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ"),
                        ttl = "P1D"
                    },
                    message = {
                        intent = {
                            item = {
                                descriptor = {
                                    name = search_term
                                }
                            }
                        }
                    }
                }

                -- Convert table to JSON
                local json_body = cjson.encode(ondc_request)

                -- Forward the transformed request to the backend
                ngx.req.set_body_data(json_body)
                ngx.req.set_header("Content-Type", "application/json")
                ngx.var.backend_url = "http://localhost:5000/ondc/search"
            }

            proxy_pass $backend_url;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}
